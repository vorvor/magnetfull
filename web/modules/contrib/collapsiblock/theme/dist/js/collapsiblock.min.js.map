{"version":3,"sources":["collapsiblock.min.js"],"names":["Drupal","cookies","once","Collapsiblock","behaviors","collapsiblock","attach","context","settings","_step","JSON","parse","cookieString","allowCollapseActivePages","active_pages","get","slide_speed","cookieData","_iterator","_createForOfIteratorHelper","parseInt","s","n","done","titleElements","value","titleElement","children","length","querySelectorAll","dataset","status","useCookie","targetElement","hasAttribute","nextElementSibling","innerHTML","id","classList","add","addEventListener","split","pop","remove","SlideElement","down","duration","slideSpeed","setAttribute","cookieOptions","path","drupalSettings","baseUrl","cookieLifetime","parseFloat","set","stringify","undefined","contains","numberActiveMenuItems","document","err","e","f","window"],"mappings":"moCAAA,SAAEA,EAAQC,EAASC,GAEjBF,EAAOG,cAAgBH,EAAOG,eAAiB,GAE/CH,EAAOI,UAAUC,cAAgB,CAC/BC,OAAQ,SAACC,EAASC,GAHpBR,IAGiCS,EAH1BN,EAAgBH,EAAOG,IAAAA,iBAEvBC,EAAUC,EAAgBK,KAAAC,MAAAC,GAAA,GACvBC,EAAUL,EAAaH,cAAAS,aAEvBF,EAAeX,SAAQc,EAAIV,cAAjCW,YAAA,IACIC,EAAaL,EAAeF,cAAWE,gBAHdM,EAAAC,2BAKVC,EAASZ,gBAASH,SAAcW,iBAAnD,yBAL6B,IAQ7B,IAAAE,EAAAG,MAAAZ,EAAAS,EAAAI,KAAAC,OAR6B,WAAA,IAQvBC,EARuBf,EAAAgB,MAAA,GAAA,IAAAC,EAAAC,SAAAC,QAAAF,EAAAC,SAAAC,SAAAF,EAAAG,iBAAA,oBAAAD,OAczB,OAMF,IARIF,EAAAA,SAAaC,EAAbG,QACCJ,qBAQL,GAPE,IAAAK,EACD,OAaD,IAHA,IAAMC,EAAwB,IAAXD,GAA2B,IAAXA,EALnCE,EAAeb,EAASM,mBAQjBO,GAAiBA,EAAcC,aAAa,uBAPnDD,EAAAA,EAAkBE,mBAYlB,IARAF,EAEA,OAUA,IAREA,EAAAA,EAAgBA,GAAAA,MAAa,KAACE,MA8DhC,GArDAT,EANAU,UAAA,yBAAAC,EAAA,mBAAAX,EAAAU,UAAA,YAOAH,EAAcK,UAAUC,IAAI,CAAC,yBAK7Bb,EAAac,iBAAiB,QAAS,WAPjCH,EAAKX,UAAgBe,SAAWC,gCACtChB,EAAaU,UAAYO,OAAA,+BACzBV,EAAcK,UAAUC,OAAK,iCAE7BK,aAAAC,KAAAZ,EAAA,CAAAa,SAAAC,IACRrB,EAAAsB,aAAA,iBAAA,GACAf,EAAAe,aAAA,eAAA,GACQtB,IACET,EAAIS,GAAaY,KAYfZ,EAT2CY,UAAES,IAAAA,+BAU7Cd,EAVAK,UAAAC,IAAA,iCAWAK,aAVAlB,GAAasB,EAAa,CAAAF,SAA1BC,IAWArB,EAVAO,aAAce,iBAAd,GAWAf,EAAce,aAAa,eAAe,GARxC/B,IACDA,EAAAoB,GAAA,IAeH,IAAIY,EAVyCF,CAW3CG,KAXAC,eAAAD,KAAAE,SAIAC,IAYAJ,EAXEhC,QAAAqC,WAAAD,IAeJpD,EAAQsD,IAAI,gBAAiB7C,KAAK8C,UAAUvC,GAAagC,KAG3D,IAAAlB,GACR,IAAAA,QAAA0B,IAAAxC,EAAAoB,IACAL,GAAA,IAAAf,EAAAoB,GAAA,CAGA,GAAA,EADAJ,EAAAJ,iBAAA,eAAAD,SACAf,GAIYkB,EAAAO,UACQoB,SAAUzC,6BAGU,EAA9BgB,EAAM0B,iBAAwB1B,6BAA+BL,OAG3D,OAKAF,EAAasB,aAAa,iBAAiB,GAP7Cf,EAAK0B,aAAqB,eAAS9C,GAYnCa,EAPKO,UAAcK,IAAAA,+BAQnBL,EANEP,UAAasB,IAAAA,iCAOff,EANEA,MAAce,QAAd,OAOFtB,EANEsB,aAAA,iBAAA,GAOFf,EANCe,aAAA,eAAA,KAlGuCY,GARf,MAAAC,GAAA3C,EAAA4C,EAAAD,GAAA,QAAA3C,EAAA6C,OALnC,CA2HG/D,OAAQgE,OAND/B,QAAce","file":"collapsiblock.min.js","sourcesContent":["((Drupal, cookies, once) => {\n\n  Drupal.Collapsiblock = Drupal.Collapsiblock || {}\n\n  Drupal.behaviors.collapsiblock = {\n    attach: (context, settings) => {\n\n      const cookieString = cookies.get('collapsiblock')\n      let cookieData = cookieString ? JSON.parse(cookieString) : {}\n      const allowCollapseActivePages = settings.collapsiblock.active_pages\n      const slideSpeed = parseInt(settings.collapsiblock.slide_speed, 10)\n      const cookieLifetime = settings.collapsiblock.cookie_lifetime\n\n      const titleElements = once('collapsiblock', document.querySelectorAll('.collapsiblockTitle'))\n\n      for (const titleElement of titleElements) {\n        // Only add the button if one or more of the children are visible.\n        if (titleElement.children.length === 0\n          || titleElement.children.length === titleElement.querySelectorAll('.visually-hidden').length) {\n          continue\n        }\n\n        // Status values: 1 = not collapsible, 2 = collapsible and expanded,\n        // 3 = collapsible and collapsed, 4 = always collapsed,\n        // 5 = always expanded\n        const status = parseInt(titleElement.dataset.collapsiblockAction)\n        if (status === 1) {\n          continue\n        }\n\n        const useCookie = (status === 2 || status === 3)\n\n        let targetElement = titleElement.nextElementSibling\n        while (targetElement && targetElement.hasAttribute('data-contextual-id')) {\n          targetElement = targetElement.nextElementSibling\n        }\n\n        // If there's no block body, escape this iteration.\n        if (!targetElement) {\n          continue\n        }\n\n        const id = titleElement.id.split('-').pop()\n        titleElement.innerHTML = '<button id=\"#collapse-' + id + '\" role=\"link\" />' + titleElement.innerHTML + '</button>'\n        targetElement.classList.add(['collapsiblockContent'])\n\n        /**\n         * Click event\n         */\n        titleElement.addEventListener('click', () => {\n          if (titleElement.classList.contains('collapsiblockTitleCollapsed')) {\n            titleElement.classList.remove('collapsiblockTitleCollapsed')\n            targetElement.classList.remove('collapsiblockContentCollapsed')\n            SlideElement.down(targetElement, { duration: slideSpeed })\n            titleElement.setAttribute('aria-expanded', true)\n            targetElement.setAttribute('aria-hidden', false)\n\n            if (useCookie) {\n              cookieData[id] = 1\n            }\n          }\n          else {\n            titleElement.classList.add('collapsiblockTitleCollapsed')\n            targetElement.classList.add('collapsiblockContentCollapsed')\n            SlideElement.up(targetElement, { duration: slideSpeed })\n            titleElement.setAttribute('aria-expanded', false)\n            targetElement.setAttribute('aria-hidden', true)\n\n            if (useCookie) {\n              cookieData[id] = 0\n            }\n          }\n\n          // Mount cookie options.\n          let cookieOptions = {\n            path: drupalSettings.path.baseUrl\n          }\n\n          // Add cookie expiration time if it's setted on config.\n          if (cookieLifetime) {\n            cookieOptions['expires'] = parseFloat(cookieLifetime)\n          }\n\n          // Stringify the object in JSON format for saving in the cookie.\n          cookies.set('collapsiblock', JSON.stringify(cookieData), cookieOptions)\n        })\n\n        /**\n         * Initial state.\n         *\n         * Collapse if any of the following criteria are met:\n         * - Blocks are always collapsed.\n         * - Blocks are collapsed by default and there's no cookie data.\n         * - Block is allowed to use cookie data and cookie says it should\n         *   be collapsed.\n         */\n        if (status === 4\n          || (status === 3 && cookieData[id] === undefined)\n          || (useCookie && cookieData[id] === 0)) {\n\n          const numberActiveMenuItems = targetElement.querySelectorAll('a.is-active').length\n          if ((numberActiveMenuItems > 0 && !allowCollapseActivePages)\n            // Allow block content to assign class\n            // 'collapsiblock-force-open' to it's content to force itself\n            // to stay open. E.g. useful if block contains a form that was\n            // just ajaxly updated and should be visible\n            || targetElement.classList.contains('collapsiblock-force-open')\n            || targetElement.querySelectorAll('.collapsiblock-force-open').length > 0) {\n            titleElement.setAttribute('aria-expanded', true)\n            targetElement.setAttribute('aria-hidden', false)\n            continue\n          }\n\n          titleElement.classList.add('collapsiblockTitleCollapsed')\n          targetElement.classList.add('collapsiblockContentCollapsed')\n          targetElement.style.display = 'none'\n          titleElement.setAttribute('aria-expanded', false)\n          targetElement.setAttribute('aria-hidden', true)\n        }\n      }\n\n    }\n  }\n})(Drupal, window.Cookies, once)\n"]}